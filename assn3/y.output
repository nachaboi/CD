Conflict in state 24 between rule 38 and token PLUS resolved as reduce.
Conflict in state 24 between rule 38 and token MINUS resolved as reduce.
Conflict in state 24 between rule 38 and token TIMES resolved as reduce.
Conflict in state 24 between rule 38 and token DIVIDE resolved as reduce.
Conflict in state 24 between rule 38 and token EQ resolved as reduce.
Conflict in state 24 between rule 38 and token NEQ resolved as reduce.
Conflict in state 24 between rule 38 and token LT resolved as reduce.
Conflict in state 24 between rule 38 and token LE resolved as reduce.
Conflict in state 24 between rule 38 and token GT resolved as reduce.
Conflict in state 24 between rule 38 and token GE resolved as reduce.
Conflict in state 24 between rule 38 and token AND resolved as reduce.
Conflict in state 24 between rule 38 and token OR resolved as reduce.
Conflict in state 68 between rule 51 and token PLUS resolved as reduce.
Conflict in state 68 between rule 51 and token MINUS resolved as reduce.
Conflict in state 68 between rule 51 and token TIMES resolved as reduce.
Conflict in state 68 between rule 51 and token DIVIDE resolved as reduce.
Conflict in state 68 between rule 51 and token EQ resolved as reduce.
Conflict in state 68 between rule 51 and token NEQ resolved as reduce.
Conflict in state 68 between rule 51 and token LT resolved as reduce.
Conflict in state 68 between rule 51 and token LE resolved as reduce.
Conflict in state 68 between rule 51 and token GT resolved as reduce.
Conflict in state 68 between rule 51 and token GE resolved as reduce.
Conflict in state 68 between rule 51 and token AND resolved as reduce.
Conflict in state 68 between rule 51 and token OR resolved as reduce.
Conflict in state 71 between rule 34 and token PLUS resolved as reduce.
Conflict in state 71 between rule 34 and token MINUS resolved as reduce.
Conflict in state 71 between rule 34 and token TIMES resolved as shift.
Conflict in state 71 between rule 34 and token DIVIDE resolved as shift.
Conflict in state 71 between rule 34 and token EQ resolved as reduce.
Conflict in state 71 between rule 34 and token NEQ resolved as reduce.
Conflict in state 71 between rule 34 and token LT resolved as reduce.
Conflict in state 71 between rule 34 and token LE resolved as reduce.
Conflict in state 71 between rule 34 and token GT resolved as reduce.
Conflict in state 71 between rule 34 and token GE resolved as reduce.
Conflict in state 71 between rule 34 and token AND resolved as reduce.
Conflict in state 71 between rule 34 and token OR resolved as reduce.
Conflict in state 72 between rule 35 and token PLUS resolved as reduce.
Conflict in state 72 between rule 35 and token MINUS resolved as reduce.
Conflict in state 72 between rule 35 and token TIMES resolved as shift.
Conflict in state 72 between rule 35 and token DIVIDE resolved as shift.
Conflict in state 72 between rule 35 and token EQ resolved as reduce.
Conflict in state 72 between rule 35 and token NEQ resolved as reduce.
Conflict in state 72 between rule 35 and token LT resolved as reduce.
Conflict in state 72 between rule 35 and token LE resolved as reduce.
Conflict in state 72 between rule 35 and token GT resolved as reduce.
Conflict in state 72 between rule 35 and token GE resolved as reduce.
Conflict in state 72 between rule 35 and token AND resolved as reduce.
Conflict in state 72 between rule 35 and token OR resolved as reduce.
Conflict in state 73 between rule 36 and token PLUS resolved as reduce.
Conflict in state 73 between rule 36 and token MINUS resolved as reduce.
Conflict in state 73 between rule 36 and token TIMES resolved as reduce.
Conflict in state 73 between rule 36 and token DIVIDE resolved as reduce.
Conflict in state 73 between rule 36 and token EQ resolved as reduce.
Conflict in state 73 between rule 36 and token NEQ resolved as reduce.
Conflict in state 73 between rule 36 and token LT resolved as reduce.
Conflict in state 73 between rule 36 and token LE resolved as reduce.
Conflict in state 73 between rule 36 and token GT resolved as reduce.
Conflict in state 73 between rule 36 and token GE resolved as reduce.
Conflict in state 73 between rule 36 and token AND resolved as reduce.
Conflict in state 73 between rule 36 and token OR resolved as reduce.
Conflict in state 74 between rule 37 and token PLUS resolved as reduce.
Conflict in state 74 between rule 37 and token MINUS resolved as reduce.
Conflict in state 74 between rule 37 and token TIMES resolved as reduce.
Conflict in state 74 between rule 37 and token DIVIDE resolved as reduce.
Conflict in state 74 between rule 37 and token EQ resolved as reduce.
Conflict in state 74 between rule 37 and token NEQ resolved as reduce.
Conflict in state 74 between rule 37 and token LT resolved as reduce.
Conflict in state 74 between rule 37 and token LE resolved as reduce.
Conflict in state 74 between rule 37 and token GT resolved as reduce.
Conflict in state 74 between rule 37 and token GE resolved as reduce.
Conflict in state 74 between rule 37 and token AND resolved as reduce.
Conflict in state 74 between rule 37 and token OR resolved as reduce.
Conflict in state 75 between rule 39 and token PLUS resolved as shift.
Conflict in state 75 between rule 39 and token MINUS resolved as shift.
Conflict in state 75 between rule 39 and token TIMES resolved as shift.
Conflict in state 75 between rule 39 and token DIVIDE resolved as shift.
Conflict in state 75 between rule 39 and token EQ resolved as reduce.
Conflict in state 75 between rule 39 and token NEQ resolved as reduce.
Conflict in state 75 between rule 39 and token LT resolved as reduce.
Conflict in state 75 between rule 39 and token LE resolved as reduce.
Conflict in state 75 between rule 39 and token GT resolved as reduce.
Conflict in state 75 between rule 39 and token GE resolved as reduce.
Conflict in state 75 between rule 39 and token AND resolved as reduce.
Conflict in state 75 between rule 39 and token OR resolved as reduce.
Conflict in state 76 between rule 40 and token PLUS resolved as shift.
Conflict in state 76 between rule 40 and token MINUS resolved as shift.
Conflict in state 76 between rule 40 and token TIMES resolved as shift.
Conflict in state 76 between rule 40 and token DIVIDE resolved as shift.
Conflict in state 76 between rule 40 and token EQ resolved as reduce.
Conflict in state 76 between rule 40 and token NEQ resolved as reduce.
Conflict in state 76 between rule 40 and token LT resolved as reduce.
Conflict in state 76 between rule 40 and token LE resolved as reduce.
Conflict in state 76 between rule 40 and token GT resolved as reduce.
Conflict in state 76 between rule 40 and token GE resolved as reduce.
Conflict in state 76 between rule 40 and token AND resolved as reduce.
Conflict in state 76 between rule 40 and token OR resolved as reduce.
Conflict in state 77 between rule 41 and token PLUS resolved as shift.
Conflict in state 77 between rule 41 and token MINUS resolved as shift.
Conflict in state 77 between rule 41 and token TIMES resolved as shift.
Conflict in state 77 between rule 41 and token DIVIDE resolved as shift.
Conflict in state 77 between rule 41 and token EQ resolved as reduce.
Conflict in state 77 between rule 41 and token NEQ resolved as reduce.
Conflict in state 77 between rule 41 and token LT resolved as reduce.
Conflict in state 77 between rule 41 and token LE resolved as reduce.
Conflict in state 77 between rule 41 and token GT resolved as reduce.
Conflict in state 77 between rule 41 and token GE resolved as reduce.
Conflict in state 77 between rule 41 and token AND resolved as reduce.
Conflict in state 77 between rule 41 and token OR resolved as reduce.
Conflict in state 78 between rule 42 and token PLUS resolved as shift.
Conflict in state 78 between rule 42 and token MINUS resolved as shift.
Conflict in state 78 between rule 42 and token TIMES resolved as shift.
Conflict in state 78 between rule 42 and token DIVIDE resolved as shift.
Conflict in state 78 between rule 42 and token EQ resolved as reduce.
Conflict in state 78 between rule 42 and token NEQ resolved as reduce.
Conflict in state 78 between rule 42 and token LT resolved as reduce.
Conflict in state 78 between rule 42 and token LE resolved as reduce.
Conflict in state 78 between rule 42 and token GT resolved as reduce.
Conflict in state 78 between rule 42 and token GE resolved as reduce.
Conflict in state 78 between rule 42 and token AND resolved as reduce.
Conflict in state 78 between rule 42 and token OR resolved as reduce.
Conflict in state 79 between rule 43 and token PLUS resolved as shift.
Conflict in state 79 between rule 43 and token MINUS resolved as shift.
Conflict in state 79 between rule 43 and token TIMES resolved as shift.
Conflict in state 79 between rule 43 and token DIVIDE resolved as shift.
Conflict in state 79 between rule 43 and token EQ resolved as reduce.
Conflict in state 79 between rule 43 and token NEQ resolved as reduce.
Conflict in state 79 between rule 43 and token LT resolved as reduce.
Conflict in state 79 between rule 43 and token LE resolved as reduce.
Conflict in state 79 between rule 43 and token GT resolved as reduce.
Conflict in state 79 between rule 43 and token GE resolved as reduce.
Conflict in state 79 between rule 43 and token AND resolved as reduce.
Conflict in state 79 between rule 43 and token OR resolved as reduce.
Conflict in state 80 between rule 44 and token PLUS resolved as shift.
Conflict in state 80 between rule 44 and token MINUS resolved as shift.
Conflict in state 80 between rule 44 and token TIMES resolved as shift.
Conflict in state 80 between rule 44 and token DIVIDE resolved as shift.
Conflict in state 80 between rule 44 and token EQ resolved as reduce.
Conflict in state 80 between rule 44 and token NEQ resolved as reduce.
Conflict in state 80 between rule 44 and token LT resolved as reduce.
Conflict in state 80 between rule 44 and token LE resolved as reduce.
Conflict in state 80 between rule 44 and token GT resolved as reduce.
Conflict in state 80 between rule 44 and token GE resolved as reduce.
Conflict in state 80 between rule 44 and token AND resolved as reduce.
Conflict in state 80 between rule 44 and token OR resolved as reduce.
Conflict in state 81 between rule 45 and token PLUS resolved as shift.
Conflict in state 81 between rule 45 and token MINUS resolved as shift.
Conflict in state 81 between rule 45 and token TIMES resolved as shift.
Conflict in state 81 between rule 45 and token DIVIDE resolved as shift.
Conflict in state 81 between rule 45 and token EQ resolved as shift.
Conflict in state 81 between rule 45 and token NEQ resolved as shift.
Conflict in state 81 between rule 45 and token LT resolved as shift.
Conflict in state 81 between rule 45 and token LE resolved as shift.
Conflict in state 81 between rule 45 and token GT resolved as shift.
Conflict in state 81 between rule 45 and token GE resolved as shift.
Conflict in state 81 between rule 45 and token AND resolved as reduce.
Conflict in state 81 between rule 45 and token OR resolved as reduce.
Conflict in state 82 between rule 46 and token PLUS resolved as shift.
Conflict in state 82 between rule 46 and token MINUS resolved as shift.
Conflict in state 82 between rule 46 and token TIMES resolved as shift.
Conflict in state 82 between rule 46 and token DIVIDE resolved as shift.
Conflict in state 82 between rule 46 and token EQ resolved as shift.
Conflict in state 82 between rule 46 and token NEQ resolved as shift.
Conflict in state 82 between rule 46 and token LT resolved as shift.
Conflict in state 82 between rule 46 and token LE resolved as shift.
Conflict in state 82 between rule 46 and token GT resolved as shift.
Conflict in state 82 between rule 46 and token GE resolved as shift.
Conflict in state 82 between rule 46 and token AND resolved as shift.
Conflict in state 82 between rule 46 and token OR resolved as reduce.
Conflict in state 91 between rule 54 and token PLUS resolved as reduce.
Conflict in state 91 between rule 54 and token MINUS resolved as reduce.
Conflict in state 91 between rule 54 and token TIMES resolved as reduce.
Conflict in state 91 between rule 54 and token DIVIDE resolved as reduce.
Conflict in state 91 between rule 54 and token EQ resolved as reduce.
Conflict in state 91 between rule 54 and token NEQ resolved as reduce.
Conflict in state 91 between rule 54 and token LT resolved as reduce.
Conflict in state 91 between rule 54 and token LE resolved as reduce.
Conflict in state 91 between rule 54 and token GT resolved as reduce.
Conflict in state 91 between rule 54 and token GE resolved as reduce.
Conflict in state 91 between rule 54 and token AND resolved as reduce.
Conflict in state 91 between rule 54 and token OR resolved as reduce.
Conflict in state 112 between rule 53 and token PLUS resolved as reduce.
Conflict in state 112 between rule 53 and token MINUS resolved as reduce.
Conflict in state 112 between rule 53 and token TIMES resolved as reduce.
Conflict in state 112 between rule 53 and token DIVIDE resolved as reduce.
Conflict in state 112 between rule 53 and token EQ resolved as reduce.
Conflict in state 112 between rule 53 and token NEQ resolved as reduce.
Conflict in state 112 between rule 53 and token LT resolved as reduce.
Conflict in state 112 between rule 53 and token LE resolved as reduce.
Conflict in state 112 between rule 53 and token GT resolved as reduce.
Conflict in state 112 between rule 53 and token GE resolved as reduce.
Conflict in state 112 between rule 53 and token AND resolved as reduce.
Conflict in state 112 between rule 53 and token OR resolved as reduce.
Conflict in state 129 between rule 55 and token PLUS resolved as reduce.
Conflict in state 129 between rule 55 and token MINUS resolved as reduce.
Conflict in state 129 between rule 55 and token TIMES resolved as reduce.
Conflict in state 129 between rule 55 and token DIVIDE resolved as reduce.
Conflict in state 129 between rule 55 and token EQ resolved as reduce.
Conflict in state 129 between rule 55 and token NEQ resolved as reduce.
Conflict in state 129 between rule 55 and token LT resolved as reduce.
Conflict in state 129 between rule 55 and token LE resolved as reduce.
Conflict in state 129 between rule 55 and token GT resolved as reduce.
Conflict in state 129 between rule 55 and token GE resolved as reduce.
Conflict in state 129 between rule 55 and token AND resolved as reduce.
Conflict in state 129 between rule 55 and token OR resolved as reduce.
State 63 contains 1 shift/reduce conflict.
State 67 contains 1 shift/reduce conflict.
State 90 contains 13 shift/reduce conflicts.
State 111 contains 12 shift/reduce conflicts.

Grammar
rule 1    program -> prg_check
rule 2    prg_check -> exp
rule 3    prg_check ->		/* empty */
rule 4    decs -> decs dec
rule 5    decs ->		/* empty */
rule 6    dec -> tydec_ext
rule 7    dec -> vardec
rule 8    dec -> fundec_ext
rule 9    tydec -> TYPE ID EQ ty
rule 10   tydec_ext -> tydec
rule 11   tydec_ext -> tydec tydec_ext
rule 12   ty -> ID
rule 13   ty -> LBRACE tyfields RBRACE
rule 14   ty -> ARRAY OF ID
rule 15   tyfields ->		/* empty */
rule 16   tyfields -> tyfields_ext
rule 17   tyfields_ext -> ID COLON ID
rule 18   tyfields_ext -> ID COLON ID COMMA tyfields_ext
rule 19   vardec -> VAR ID ASSIGN exp
rule 20   vardec -> VAR ID COLON ID ASSIGN exp
rule 21   fundec_ext -> fundec
rule 22   fundec_ext -> fundec fundec_ext
rule 23   fundec -> FUNCTION ID LPAREN tyfields RPAREN EQ exp
rule 24   fundec -> FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
rule 25   lvalue -> ID
rule 26   lvalue -> lvalue_ext
rule 27   lvalue_ext -> lvalue_extSING
rule 28   lvalue_ext -> lvalue_ext DOT ID
rule 29   lvalue_ext -> lvalue_ext LBRACK exp RBRACK
rule 30   lvalue_extSING -> ID DOT ID
rule 31   lvalue_extSING -> ID LBRACK exp RBRACK
rule 32   exp -> INT
rule 33   exp -> NIL
rule 34   exp -> exp PLUS exp
rule 35   exp -> exp MINUS exp
rule 36   exp -> exp TIMES exp
rule 37   exp -> exp DIVIDE exp
rule 38   exp -> MINUS exp
rule 39   exp -> exp EQ exp
rule 40   exp -> exp NEQ exp
rule 41   exp -> exp LT exp
rule 42   exp -> exp LE exp
rule 43   exp -> exp GT exp
rule 44   exp -> exp GE exp
rule 45   exp -> exp AND exp
rule 46   exp -> exp OR exp
rule 47   exp -> BREAK
rule 48   exp -> STRING
rule 49   exp -> LET decs IN expseq END
rule 50   exp -> lvalue
rule 51   exp -> lvalue ASSIGN exp
rule 52   exp -> IF exp THEN exp
rule 53   exp -> IF exp THEN exp ELSE exp
rule 54   exp -> WHILE exp DO exp
rule 55   exp -> FOR ID ASSIGN exp TO exp DO exp
rule 56   exp -> ID LBRACK exp RBRACK OF exp
rule 57   exp -> ID LPAREN exp_com RPAREN
rule 58   exp -> ID LPAREN RPAREN
rule 59   exp -> ID LBRACE RBRACE
rule 60   exp -> ID LBRACE exp_comeq RBRACE
rule 61   exp -> LPAREN RPAREN
rule 62   exp -> LPAREN expseq RPAREN
rule 63   exp_com -> exp COMMA exp_com
rule 64   exp_com -> exp
rule 65   exp_comeq -> exp_comeq_ext COMMA exp_comeq
rule 66   exp_comeq -> exp_comeq_ext
rule 67   exp_comeq_ext -> ID EQ exp
rule 68   expseq -> exp
rule 69   expseq -> expseq SEMICOLON exp

Terminals, with rules where they appear

$ (-1)
error (256)
ID (258) 9 12 14 17 18 19 20 23 24 25 28 30 31 55 56 57 58 59 60 67
STRING (259) 48
INT (260) 32
COMMA (261) 18 63 65
COLON (262) 17 18 20 24
SEMICOLON (263) 69
LPAREN (264) 23 24 57 58 61 62
RPAREN (265) 23 24 57 58 61 62
LBRACK (266) 29 31 56
RBRACK (267) 29 31 56
LBRACE (268) 13 59 60
RBRACE (269) 13 59 60
DOT (270) 28 30
PLUS (271) 34
MINUS (272) 35 38
TIMES (273) 36
DIVIDE (274) 37
EQ (275) 9 23 24 39 67
NEQ (276) 40
LT (277) 41
LE (278) 42
GT (279) 43
GE (280) 44
AND (281) 45
OR (282) 46
ASSIGN (283) 19 20 51 55
ARRAY (284) 14
IF (285) 52 53
THEN (286) 52 53
ELSE (287) 53
WHILE (288) 54
FOR (289) 55
TO (290) 55
DO (291) 54 55
LET (292) 49
IN (293) 49
END (294) 49
OF (295) 14 56
BREAK (296) 47
NIL (297) 33
FUNCTION (298) 23 24
VAR (299) 19 20
TYPE (300) 9
UMINUS (301)

Nonterminals, with rules where they appear

program (47)
    on left: 1
prg_check (48)
    on left: 2 3, on right: 1
decs (49)
    on left: 4 5, on right: 4 49
dec (50)
    on left: 6 7 8, on right: 4
tydec (51)
    on left: 9, on right: 10 11
tydec_ext (52)
    on left: 10 11, on right: 6 11
ty (53)
    on left: 12 13 14, on right: 9
tyfields (54)
    on left: 15 16, on right: 13 23 24
tyfields_ext (55)
    on left: 17 18, on right: 16 18
vardec (56)
    on left: 19 20, on right: 7
fundec_ext (57)
    on left: 21 22, on right: 8 22
fundec (58)
    on left: 23 24, on right: 21 22
lvalue (59)
    on left: 25 26, on right: 50 51
lvalue_ext (60)
    on left: 27 28 29, on right: 26 28 29
lvalue_extSING (61)
    on left: 30 31, on right: 27
exp (62)
    on left: 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
    50 51 52 53 54 55 56 57 58 59 60 61 62, on right: 2 19 20 23 24
    29 31 34 35 36 37 38 39 40 41 42 43 44 45 46 51 52 53 54 55 56
    63 64 67 68 69
exp_com (63)
    on left: 63 64, on right: 57 63
exp_comeq (64)
    on left: 65 66, on right: 60 65
exp_comeq_ext (65)
    on left: 67, on right: 65 66
expseq (66)
    on left: 68 69, on right: 49 62 69


state 0

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    $default	reduce using rule 3 (prg_check)

    program	go to state 142
    prg_check	go to state 12
    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 16



state 1

    lvalue  ->  ID .   (rule 25)
    lvalue_extSING  ->  ID . DOT ID   (rule 30)
    lvalue_extSING  ->  ID . LBRACK exp RBRACK   (rule 31)
    exp  ->  ID . LBRACK exp RBRACK OF exp   (rule 56)
    exp  ->  ID . LPAREN exp_com RPAREN   (rule 57)
    exp  ->  ID . LPAREN RPAREN   (rule 58)
    exp  ->  ID . LBRACE RBRACE   (rule 59)
    exp  ->  ID . LBRACE exp_comeq RBRACE   (rule 60)

    LPAREN	shift, and go to state 17
    LBRACK	shift, and go to state 18
    LBRACE	shift, and go to state 19
    DOT 	shift, and go to state 20

    $default	reduce using rule 25 (lvalue)



state 2

    exp  ->  STRING .   (rule 48)

    $default	reduce using rule 48 (exp)



state 3

    exp  ->  INT .   (rule 32)

    $default	reduce using rule 32 (exp)



state 4

    exp  ->  LPAREN . RPAREN   (rule 61)
    exp  ->  LPAREN . expseq RPAREN   (rule 62)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    RPAREN	shift, and go to state 21
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 22
    expseq	go to state 23



state 5

    exp  ->  MINUS . exp   (rule 38)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 24



state 6

    exp  ->  IF . exp THEN exp   (rule 52)
    exp  ->  IF . exp THEN exp ELSE exp   (rule 53)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 25



state 7

    exp  ->  WHILE . exp DO exp   (rule 54)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 26



state 8

    exp  ->  FOR . ID ASSIGN exp TO exp DO exp   (rule 55)

    ID  	shift, and go to state 27



state 9

    exp  ->  LET . decs IN expseq END   (rule 49)

    $default	reduce using rule 5 (decs)

    decs	go to state 28



state 10

    exp  ->  BREAK .   (rule 47)

    $default	reduce using rule 47 (exp)



state 11

    exp  ->  NIL .   (rule 33)

    $default	reduce using rule 33 (exp)



state 12

    program  ->  prg_check .   (rule 1)

    $default	reduce using rule 1 (program)



state 13

    exp  ->  lvalue .   (rule 50)
    exp  ->  lvalue . ASSIGN exp   (rule 51)

    ASSIGN	shift, and go to state 29

    $default	reduce using rule 50 (exp)



state 14

    lvalue  ->  lvalue_ext .   (rule 26)
    lvalue_ext  ->  lvalue_ext . DOT ID   (rule 28)
    lvalue_ext  ->  lvalue_ext . LBRACK exp RBRACK   (rule 29)

    LBRACK	shift, and go to state 30
    DOT 	shift, and go to state 31

    $default	reduce using rule 26 (lvalue)



state 15

    lvalue_ext  ->  lvalue_extSING .   (rule 27)

    $default	reduce using rule 27 (lvalue_ext)



state 16

    prg_check  ->  exp .   (rule 2)
    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 2 (prg_check)



state 17

    exp  ->  ID LPAREN . exp_com RPAREN   (rule 57)
    exp  ->  ID LPAREN . RPAREN   (rule 58)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    RPAREN	shift, and go to state 44
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 45
    exp_com	go to state 46



state 18

    lvalue_extSING  ->  ID LBRACK . exp RBRACK   (rule 31)
    exp  ->  ID LBRACK . exp RBRACK OF exp   (rule 56)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 47



state 19

    exp  ->  ID LBRACE . RBRACE   (rule 59)
    exp  ->  ID LBRACE . exp_comeq RBRACE   (rule 60)

    ID  	shift, and go to state 48
    RBRACE	shift, and go to state 49

    exp_comeq	go to state 50
    exp_comeq_ext	go to state 51



state 20

    lvalue_extSING  ->  ID DOT . ID   (rule 30)

    ID  	shift, and go to state 52



state 21

    exp  ->  LPAREN RPAREN .   (rule 61)

    $default	reduce using rule 61 (exp)



state 22

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    expseq  ->  exp .   (rule 68)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 68 (expseq)



state 23

    exp  ->  LPAREN expseq . RPAREN   (rule 62)
    expseq  ->  expseq . SEMICOLON exp   (rule 69)

    SEMICOLON	shift, and go to state 53
    RPAREN	shift, and go to state 54



state 24

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  MINUS exp .   (rule 38)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)


    $default	reduce using rule 38 (exp)



state 25

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  IF exp . THEN exp   (rule 52)
    exp  ->  IF exp . THEN exp ELSE exp   (rule 53)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    THEN	shift, and go to state 55



state 26

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  WHILE exp . DO exp   (rule 54)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    DO  	shift, and go to state 56



state 27

    exp  ->  FOR ID . ASSIGN exp TO exp DO exp   (rule 55)

    ASSIGN	shift, and go to state 57



state 28

    decs  ->  decs . dec   (rule 4)
    exp  ->  LET decs . IN expseq END   (rule 49)

    IN  	shift, and go to state 58
    FUNCTION	shift, and go to state 59
    VAR 	shift, and go to state 60
    TYPE	shift, and go to state 61

    dec 	go to state 62
    tydec	go to state 63
    tydec_ext	go to state 64
    vardec	go to state 65
    fundec_ext	go to state 66
    fundec	go to state 67



state 29

    exp  ->  lvalue ASSIGN . exp   (rule 51)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 68



state 30

    lvalue_ext  ->  lvalue_ext LBRACK . exp RBRACK   (rule 29)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 69



state 31

    lvalue_ext  ->  lvalue_ext DOT . ID   (rule 28)

    ID  	shift, and go to state 70



state 32

    exp  ->  exp PLUS . exp   (rule 34)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 71



state 33

    exp  ->  exp MINUS . exp   (rule 35)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 72



state 34

    exp  ->  exp TIMES . exp   (rule 36)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 73



state 35

    exp  ->  exp DIVIDE . exp   (rule 37)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 74



state 36

    exp  ->  exp EQ . exp   (rule 39)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 75



state 37

    exp  ->  exp NEQ . exp   (rule 40)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 76



state 38

    exp  ->  exp LT . exp   (rule 41)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 77



state 39

    exp  ->  exp LE . exp   (rule 42)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 78



state 40

    exp  ->  exp GT . exp   (rule 43)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 79



state 41

    exp  ->  exp GE . exp   (rule 44)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 80



state 42

    exp  ->  exp AND . exp   (rule 45)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 81



state 43

    exp  ->  exp OR . exp   (rule 46)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 82



state 44

    exp  ->  ID LPAREN RPAREN .   (rule 58)

    $default	reduce using rule 58 (exp)



state 45

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp_com  ->  exp . COMMA exp_com   (rule 63)
    exp_com  ->  exp .   (rule 64)

    COMMA	shift, and go to state 83
    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 64 (exp_com)



state 46

    exp  ->  ID LPAREN exp_com . RPAREN   (rule 57)

    RPAREN	shift, and go to state 84



state 47

    lvalue_extSING  ->  ID LBRACK exp . RBRACK   (rule 31)
    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  ID LBRACK exp . RBRACK OF exp   (rule 56)

    RBRACK	shift, and go to state 85
    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43



state 48

    exp_comeq_ext  ->  ID . EQ exp   (rule 67)

    EQ  	shift, and go to state 86



state 49

    exp  ->  ID LBRACE RBRACE .   (rule 59)

    $default	reduce using rule 59 (exp)



state 50

    exp  ->  ID LBRACE exp_comeq . RBRACE   (rule 60)

    RBRACE	shift, and go to state 87



state 51

    exp_comeq  ->  exp_comeq_ext . COMMA exp_comeq   (rule 65)
    exp_comeq  ->  exp_comeq_ext .   (rule 66)

    COMMA	shift, and go to state 88

    $default	reduce using rule 66 (exp_comeq)



state 52

    lvalue_extSING  ->  ID DOT ID .   (rule 30)

    $default	reduce using rule 30 (lvalue_extSING)



state 53

    expseq  ->  expseq SEMICOLON . exp   (rule 69)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 89



state 54

    exp  ->  LPAREN expseq RPAREN .   (rule 62)

    $default	reduce using rule 62 (exp)



state 55

    exp  ->  IF exp THEN . exp   (rule 52)
    exp  ->  IF exp THEN . exp ELSE exp   (rule 53)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 90



state 56

    exp  ->  WHILE exp DO . exp   (rule 54)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 91



state 57

    exp  ->  FOR ID ASSIGN . exp TO exp DO exp   (rule 55)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 92



state 58

    exp  ->  LET decs IN . expseq END   (rule 49)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 22
    expseq	go to state 93



state 59

    fundec  ->  FUNCTION . ID LPAREN tyfields RPAREN EQ exp   (rule 23)
    fundec  ->  FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp   (rule 24)

    ID  	shift, and go to state 94



state 60

    vardec  ->  VAR . ID ASSIGN exp   (rule 19)
    vardec  ->  VAR . ID COLON ID ASSIGN exp   (rule 20)

    ID  	shift, and go to state 95



state 61

    tydec  ->  TYPE . ID EQ ty   (rule 9)

    ID  	shift, and go to state 96



state 62

    decs  ->  decs dec .   (rule 4)

    $default	reduce using rule 4 (decs)



state 63

    tydec_ext  ->  tydec .   (rule 10)
    tydec_ext  ->  tydec . tydec_ext   (rule 11)

    TYPE	shift, and go to state 61

    TYPE	[reduce using rule 10 (tydec_ext)]
    $default	reduce using rule 10 (tydec_ext)

    tydec	go to state 63
    tydec_ext	go to state 97



state 64

    dec  ->  tydec_ext .   (rule 6)

    $default	reduce using rule 6 (dec)



state 65

    dec  ->  vardec .   (rule 7)

    $default	reduce using rule 7 (dec)



state 66

    dec  ->  fundec_ext .   (rule 8)

    $default	reduce using rule 8 (dec)



state 67

    fundec_ext  ->  fundec .   (rule 21)
    fundec_ext  ->  fundec . fundec_ext   (rule 22)

    FUNCTION	shift, and go to state 59

    FUNCTION	[reduce using rule 21 (fundec_ext)]
    $default	reduce using rule 21 (fundec_ext)

    fundec_ext	go to state 98
    fundec	go to state 67



state 68

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  lvalue ASSIGN exp .   (rule 51)


    $default	reduce using rule 51 (exp)



state 69

    lvalue_ext  ->  lvalue_ext LBRACK exp . RBRACK   (rule 29)
    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    RBRACK	shift, and go to state 99
    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43



state 70

    lvalue_ext  ->  lvalue_ext DOT ID .   (rule 28)

    $default	reduce using rule 28 (lvalue_ext)



state 71

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp PLUS exp .   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 34 (exp)



state 72

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp MINUS exp .   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 35 (exp)



state 73

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp TIMES exp .   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)


    $default	reduce using rule 36 (exp)



state 74

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp DIVIDE exp .   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)


    $default	reduce using rule 37 (exp)



state 75

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp EQ exp .   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 39 (exp)



state 76

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp NEQ exp .   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 40 (exp)



state 77

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp LT exp .   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 41 (exp)



state 78

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp LE exp .   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 42 (exp)



state 79

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp GT exp .   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 43 (exp)



state 80

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp GE exp .   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 44 (exp)



state 81

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp AND exp .   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41

    $default	reduce using rule 45 (exp)



state 82

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  exp OR exp .   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42

    $default	reduce using rule 46 (exp)



state 83

    exp_com  ->  exp COMMA . exp_com   (rule 63)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 45
    exp_com	go to state 100



state 84

    exp  ->  ID LPAREN exp_com RPAREN .   (rule 57)

    $default	reduce using rule 57 (exp)



state 85

    lvalue_extSING  ->  ID LBRACK exp RBRACK .   (rule 31)
    exp  ->  ID LBRACK exp RBRACK . OF exp   (rule 56)

    OF  	shift, and go to state 101

    $default	reduce using rule 31 (lvalue_extSING)



state 86

    exp_comeq_ext  ->  ID EQ . exp   (rule 67)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 102



state 87

    exp  ->  ID LBRACE exp_comeq RBRACE .   (rule 60)

    $default	reduce using rule 60 (exp)



state 88

    exp_comeq  ->  exp_comeq_ext COMMA . exp_comeq   (rule 65)

    ID  	shift, and go to state 48

    exp_comeq	go to state 103
    exp_comeq_ext	go to state 51



state 89

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    expseq  ->  expseq SEMICOLON exp .   (rule 69)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 69 (expseq)



state 90

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  IF exp THEN exp .   (rule 52)
    exp  ->  IF exp THEN exp . ELSE exp   (rule 53)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    ELSE	shift, and go to state 104

    PLUS	[reduce using rule 52 (exp)]
    MINUS	[reduce using rule 52 (exp)]
    TIMES	[reduce using rule 52 (exp)]
    DIVIDE	[reduce using rule 52 (exp)]
    EQ  	[reduce using rule 52 (exp)]
    NEQ 	[reduce using rule 52 (exp)]
    LT  	[reduce using rule 52 (exp)]
    LE  	[reduce using rule 52 (exp)]
    GT  	[reduce using rule 52 (exp)]
    GE  	[reduce using rule 52 (exp)]
    AND 	[reduce using rule 52 (exp)]
    OR  	[reduce using rule 52 (exp)]
    ELSE	[reduce using rule 52 (exp)]
    $default	reduce using rule 52 (exp)



state 91

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  WHILE exp DO exp .   (rule 54)


    $default	reduce using rule 54 (exp)



state 92

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  FOR ID ASSIGN exp . TO exp DO exp   (rule 55)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    TO  	shift, and go to state 105



state 93

    exp  ->  LET decs IN expseq . END   (rule 49)
    expseq  ->  expseq . SEMICOLON exp   (rule 69)

    SEMICOLON	shift, and go to state 53
    END 	shift, and go to state 106



state 94

    fundec  ->  FUNCTION ID . LPAREN tyfields RPAREN EQ exp   (rule 23)
    fundec  ->  FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp   (rule 24)

    LPAREN	shift, and go to state 107



state 95

    vardec  ->  VAR ID . ASSIGN exp   (rule 19)
    vardec  ->  VAR ID . COLON ID ASSIGN exp   (rule 20)

    COLON	shift, and go to state 108
    ASSIGN	shift, and go to state 109



state 96

    tydec  ->  TYPE ID . EQ ty   (rule 9)

    EQ  	shift, and go to state 110



state 97

    tydec_ext  ->  tydec tydec_ext .   (rule 11)

    $default	reduce using rule 11 (tydec_ext)



state 98

    fundec_ext  ->  fundec fundec_ext .   (rule 22)

    $default	reduce using rule 22 (fundec_ext)



state 99

    lvalue_ext  ->  lvalue_ext LBRACK exp RBRACK .   (rule 29)

    $default	reduce using rule 29 (lvalue_ext)



state 100

    exp_com  ->  exp COMMA exp_com .   (rule 63)

    $default	reduce using rule 63 (exp_com)



state 101

    exp  ->  ID LBRACK exp RBRACK OF . exp   (rule 56)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 111



state 102

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp_comeq_ext  ->  ID EQ exp .   (rule 67)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 67 (exp_comeq_ext)



state 103

    exp_comeq  ->  exp_comeq_ext COMMA exp_comeq .   (rule 65)

    $default	reduce using rule 65 (exp_comeq)



state 104

    exp  ->  IF exp THEN exp ELSE . exp   (rule 53)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 112



state 105

    exp  ->  FOR ID ASSIGN exp TO . exp DO exp   (rule 55)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 113



state 106

    exp  ->  LET decs IN expseq END .   (rule 49)

    $default	reduce using rule 49 (exp)



state 107

    fundec  ->  FUNCTION ID LPAREN . tyfields RPAREN EQ exp   (rule 23)
    fundec  ->  FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp   (rule 24)

    ID  	shift, and go to state 114

    $default	reduce using rule 15 (tyfields)

    tyfields	go to state 115
    tyfields_ext	go to state 116



state 108

    vardec  ->  VAR ID COLON . ID ASSIGN exp   (rule 20)

    ID  	shift, and go to state 117



state 109

    vardec  ->  VAR ID ASSIGN . exp   (rule 19)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 118



state 110

    tydec  ->  TYPE ID EQ . ty   (rule 9)

    ID  	shift, and go to state 119
    LBRACE	shift, and go to state 120
    ARRAY	shift, and go to state 121

    ty  	go to state 122



state 111

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  ID LBRACK exp RBRACK OF exp .   (rule 56)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    PLUS	[reduce using rule 56 (exp)]
    MINUS	[reduce using rule 56 (exp)]
    TIMES	[reduce using rule 56 (exp)]
    DIVIDE	[reduce using rule 56 (exp)]
    EQ  	[reduce using rule 56 (exp)]
    NEQ 	[reduce using rule 56 (exp)]
    LT  	[reduce using rule 56 (exp)]
    LE  	[reduce using rule 56 (exp)]
    GT  	[reduce using rule 56 (exp)]
    GE  	[reduce using rule 56 (exp)]
    AND 	[reduce using rule 56 (exp)]
    OR  	[reduce using rule 56 (exp)]
    $default	reduce using rule 56 (exp)



state 112

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  IF exp THEN exp ELSE exp .   (rule 53)


    $default	reduce using rule 53 (exp)



state 113

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  FOR ID ASSIGN exp TO exp . DO exp   (rule 55)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    DO  	shift, and go to state 123



state 114

    tyfields_ext  ->  ID . COLON ID   (rule 17)
    tyfields_ext  ->  ID . COLON ID COMMA tyfields_ext   (rule 18)

    COLON	shift, and go to state 124



state 115

    fundec  ->  FUNCTION ID LPAREN tyfields . RPAREN EQ exp   (rule 23)
    fundec  ->  FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp   (rule 24)

    RPAREN	shift, and go to state 125



state 116

    tyfields  ->  tyfields_ext .   (rule 16)

    $default	reduce using rule 16 (tyfields)



state 117

    vardec  ->  VAR ID COLON ID . ASSIGN exp   (rule 20)

    ASSIGN	shift, and go to state 126



state 118

    vardec  ->  VAR ID ASSIGN exp .   (rule 19)
    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 19 (vardec)



state 119

    ty  ->  ID .   (rule 12)

    $default	reduce using rule 12 (ty)



state 120

    ty  ->  LBRACE . tyfields RBRACE   (rule 13)

    ID  	shift, and go to state 114

    $default	reduce using rule 15 (tyfields)

    tyfields	go to state 127
    tyfields_ext	go to state 116



state 121

    ty  ->  ARRAY . OF ID   (rule 14)

    OF  	shift, and go to state 128



state 122

    tydec  ->  TYPE ID EQ ty .   (rule 9)

    $default	reduce using rule 9 (tydec)



state 123

    exp  ->  FOR ID ASSIGN exp TO exp DO . exp   (rule 55)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 129



state 124

    tyfields_ext  ->  ID COLON . ID   (rule 17)
    tyfields_ext  ->  ID COLON . ID COMMA tyfields_ext   (rule 18)

    ID  	shift, and go to state 130



state 125

    fundec  ->  FUNCTION ID LPAREN tyfields RPAREN . EQ exp   (rule 23)
    fundec  ->  FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp   (rule 24)

    COLON	shift, and go to state 131
    EQ  	shift, and go to state 132



state 126

    vardec  ->  VAR ID COLON ID ASSIGN . exp   (rule 20)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 133



state 127

    ty  ->  LBRACE tyfields . RBRACE   (rule 13)

    RBRACE	shift, and go to state 134



state 128

    ty  ->  ARRAY OF . ID   (rule 14)

    ID  	shift, and go to state 135



state 129

    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)
    exp  ->  FOR ID ASSIGN exp TO exp DO exp .   (rule 55)


    $default	reduce using rule 55 (exp)



state 130

    tyfields_ext  ->  ID COLON ID .   (rule 17)
    tyfields_ext  ->  ID COLON ID . COMMA tyfields_ext   (rule 18)

    COMMA	shift, and go to state 136

    $default	reduce using rule 17 (tyfields_ext)



state 131

    fundec  ->  FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp   (rule 24)

    ID  	shift, and go to state 137



state 132

    fundec  ->  FUNCTION ID LPAREN tyfields RPAREN EQ . exp   (rule 23)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 138



state 133

    vardec  ->  VAR ID COLON ID ASSIGN exp .   (rule 20)
    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 20 (vardec)



state 134

    ty  ->  LBRACE tyfields RBRACE .   (rule 13)

    $default	reduce using rule 13 (ty)



state 135

    ty  ->  ARRAY OF ID .   (rule 14)

    $default	reduce using rule 14 (ty)



state 136

    tyfields_ext  ->  ID COLON ID COMMA . tyfields_ext   (rule 18)

    ID  	shift, and go to state 114

    tyfields_ext	go to state 139



state 137

    fundec  ->  FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp   (rule 24)

    EQ  	shift, and go to state 140



state 138

    fundec  ->  FUNCTION ID LPAREN tyfields RPAREN EQ exp .   (rule 23)
    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 23 (fundec)



state 139

    tyfields_ext  ->  ID COLON ID COMMA tyfields_ext .   (rule 18)

    $default	reduce using rule 18 (tyfields_ext)



state 140

    fundec  ->  FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp   (rule 24)

    ID  	shift, and go to state 1
    STRING	shift, and go to state 2
    INT 	shift, and go to state 3
    LPAREN	shift, and go to state 4
    MINUS	shift, and go to state 5
    IF  	shift, and go to state 6
    WHILE	shift, and go to state 7
    FOR 	shift, and go to state 8
    LET 	shift, and go to state 9
    BREAK	shift, and go to state 10
    NIL 	shift, and go to state 11

    lvalue	go to state 13
    lvalue_ext	go to state 14
    lvalue_extSING	go to state 15
    exp 	go to state 141



state 141

    fundec  ->  FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .   (rule 24)
    exp  ->  exp . PLUS exp   (rule 34)
    exp  ->  exp . MINUS exp   (rule 35)
    exp  ->  exp . TIMES exp   (rule 36)
    exp  ->  exp . DIVIDE exp   (rule 37)
    exp  ->  exp . EQ exp   (rule 39)
    exp  ->  exp . NEQ exp   (rule 40)
    exp  ->  exp . LT exp   (rule 41)
    exp  ->  exp . LE exp   (rule 42)
    exp  ->  exp . GT exp   (rule 43)
    exp  ->  exp . GE exp   (rule 44)
    exp  ->  exp . AND exp   (rule 45)
    exp  ->  exp . OR exp   (rule 46)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 24 (fundec)



state 142

    $   	go to state 143



state 143

    $   	go to state 144



state 144

    $default	accept
