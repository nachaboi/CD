%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	A_expList explist;
	A_decList declist;
	A_dec  dec;
	A_efieldList efieldlist;
	A_efield  efield;
	A_namety namety;
	A_nametyList nametylist;
	A_fieldList fieldlist;
	A_field field;
	A_fundecList fundeclist;
	A_fundec fundec;
	A_ty ty;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%type <exp> exp  prg_check
%type <var> lvalue lvalue_ext lvalue_extSING
%type <declist> decs
%type <explist> exp_com expseq
%type <dec> vardec dec tydec_ext fundec_ext
%type <fieldlist> tyfields tyfields_ext
%type <ty> ty
%type <namety> tydec
//%type <nametylist>
%type <efieldlist> exp_comeq
%type <efield> exp_comeq_ext
%type <fundec> fundec
//%type <fundeclist> fundec


%left OR
%left AND
%left EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%nonassoc DO ELSE ASSIGN

%start program

%%

program:	prg_check    {absyn_root=$1;}

prg_check:	exp	{$$=$1;}
		| {$$ = NULL;}

decs:	decs dec	{$$ = A_DecList($2,$1);}
	| 	{$$ = NULL;}

dec:	tydec_ext	{$$ = $1;}
	| vardec	{$$ = $1;}
	| fundec_ext	{$$ = $1;}

tydec:	TYPE ID EQ ty	{$$ = A_Namety(S_Symbol($2),$4);}

tydec_ext:	tydec	{$$ = A_TypeDec(EM_tokPos,A_NametyList($1,NULL));}
		|tydec tydec_ext	{$$ = A_TypeDec(EM_tokPos, A_NametyList($1,$2->u.type));}

ty:	ID		{$$ = A_NameTy(EM_tokPos,S_Symbol($1));}
	| LBRACE tyfields RBRACE	{$$ = A_RecordTy(EM_tokPos,$2);}
	| ARRAY OF ID	{$$ = A_ArrayTy(EM_tokPos,S_Symbol($3));}
	
tyfields:		{$$ = NULL;}
		| tyfields_ext	{$$ = $1;}

tyfields_ext:	ID COLON ID	{$$ = A_FieldList(A_Field(EM_tokPos,S_Symbol($1),S_Symbol($3)),NULL);}
		| ID COLON ID COMMA tyfields_ext  {$$ = A_FieldList(A_Field(EM_tokPos,S_Symbol($1),S_Symbol($3)),$5);}

vardec:	VAR ID ASSIGN exp	{$$ = A_VarDec(EM_tokPos,S_Symbol($2),S_Symbol(""),$4);}
		| VAR ID COLON ID ASSIGN exp	{$$ = A_VarDec(EM_tokPos,S_Symbol($2),S_Symbol($4),$6);}
		
fundec_ext:	fundec	{$$ = A_FunctionDec(EM_tokPos,A_FundecList($1, NULL));}
		|fundec fundec_ext 	{$$ = A_FunctionDec(EM_tokPos, A_FundecList($1,$2->u.function));}
		
fundec:	FUNCTION ID LPAREN tyfields RPAREN EQ exp 	{$$ = A_Fundec(EM_tokPos,S_Symbol($2),$4,NULL,$7);}
		| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp	{$$ = A_Fundec(EM_tokPos,S_Symbol($2),$4,S_Symbol($7),$9);}

lvalue:	ID	{$$ = A_SimpleVar(EM_tokPos,S_Symbol($1));}
		| lvalue_ext	{$$ = $1;}
		
lvalue_ext:	lvalue_extSING       {$$ = $1;}
           	|lvalue_ext DOT ID   {$$ = A_FieldVar(EM_tokPos,$1,S_Symbol($3));}
           	|lvalue_ext LBRACK exp RBRACK   {$$ = A_SubscriptVar(EM_tokPos,$1,$3);}

lvalue_extSING:	ID DOT ID	{$$ = A_FieldVar(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)),S_Symbol($3));}
    			|ID LBRACK exp RBRACK	{$$ = A_SubscriptVar(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)),$3);}
		
exp:	INT		{$$ = A_IntExp(EM_tokPos,$1);}
	| NIL		{$$ = A_NilExp(EM_tokPos);}
	| exp PLUS exp	{$$ = A_OpExp(EM_tokPos,A_plusOp,$1,$3);}
	| exp MINUS exp	{$$ = A_OpExp(EM_tokPos,A_minusOp,$1,$3);}
	| exp TIMES exp	{$$ = A_OpExp(EM_tokPos,A_timesOp,$1,$3);}
	| exp DIVIDE exp	{$$ = A_OpExp(EM_tokPos,A_divideOp,$1,$3);}
	| MINUS exp	%prec UMINUS	{$$ = A_OpExp(EM_tokPos,A_minusOp,A_IntExp(EM_tokPos,0),$2);}
	| exp EQ exp	{$$ = A_OpExp(EM_tokPos,A_eqOp,$1,$3);}
	| exp NEQ exp	{$$ = A_OpExp(EM_tokPos,A_neqOp,$1,$3);}
	| exp LT exp	{$$ = A_OpExp(EM_tokPos,A_ltOp,$1,$3);}
	| exp LE exp	{$$ = A_OpExp(EM_tokPos,A_leOp,$1,$3);}
	| exp GT exp	{$$ = A_OpExp(EM_tokPos,A_gtOp,$1,$3);}
	| exp GE exp	{$$ = A_OpExp(EM_tokPos,A_geOp,$1,$3);}
	| exp AND exp	{$$ = A_IfExp(EM_tokPos,$1,$3,A_IntExp(EM_tokPos,0));}
	| exp OR exp	{$$ = A_IfExp(EM_tokPos,$1,A_IntExp(EM_tokPos,1),$3);}
	//| ID ASSIGN exp	{}
	| BREAK	{$$ = A_BreakExp(EM_tokPos);}
	| STRING	{$$ = A_StringExp(EM_tokPos,$1);}
	| LET decs IN expseq END	{$$ = A_LetExp(EM_tokPos,$2, A_SeqExp(EM_tokPos,$4));}
	| lvalue	{$$ = A_VarExp(EM_tokPos,$1);}
	| lvalue ASSIGN exp	{$$ = A_AssignExp(EM_tokPos,$1,$3);}
	| IF exp THEN exp	{$$ = A_IfExp(EM_tokPos,$2,$4,NULL);}
	| IF exp THEN exp ELSE exp	{$$ = A_IfExp(EM_tokPos,$2,$4,$6);}
	| WHILE exp DO exp	{$$ = A_WhileExp(EM_tokPos,$2,$4);}
	| FOR ID ASSIGN exp TO exp DO exp	{$$ = A_ForExp(EM_tokPos,S_Symbol($2),$4,$6,$8);}
	| ID LBRACK exp RBRACK OF exp {$$ = A_ArrayExp(EM_tokPos,S_Symbol($1),$3,$6);}
	| ID LPAREN exp_com RPAREN	{$$ = A_CallExp(EM_tokPos,S_Symbol($1), $3);}
	| ID LPAREN RPAREN	{$$ = A_CallExp(EM_tokPos,S_Symbol($1),NULL);}
	| ID LBRACE RBRACE	{$$ = A_RecordExp(EM_tokPos,S_Symbol($1),NULL);}
	| ID LBRACE exp_comeq RBRACE{$$ = A_RecordExp(EM_tokPos,S_Symbol($1),$3);}
	
	| LPAREN RPAREN	{$$ = A_SeqExp(EM_tokPos,NULL);}
	//| LPAREN exp RPAREN	{$$ = $2;}
	| LPAREN expseq RPAREN	{$$ = A_SeqExp(EM_tokPos,$2);}
	
	//| ID LBRACK exp RBRACK	{}
	
	
exp_com:	exp COMMA exp_com	{$$ = A_ExpList($1,$3);}
		| exp	{$$ = A_ExpList($1,NULL);}
		
exp_comeq:	exp_comeq_ext COMMA exp_comeq	{$$ = A_EfieldList($1,$3);}
		| exp_comeq_ext	{$$ = A_EfieldList($1,NULL);}
		
exp_comeq_ext:	ID EQ exp	{$$ = A_Efield(S_Symbol($1),$3);}
	
expseq:	exp                  {$$ = A_ExpList($1,NULL);}
      		| expseq SEMICOLON exp {$$ = A_ExpList($3,$1);}


